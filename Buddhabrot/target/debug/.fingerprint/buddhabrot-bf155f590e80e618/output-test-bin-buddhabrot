{"message":"unused import: `self::twofloat::TwoFloat`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/mandelbrot.rs","byte_start":91,"byte_end":115,"line_start":6,"line_end":6,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use self::twofloat::TwoFloat;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/mandelbrot.rs","byte_start":87,"byte_end":116,"line_start":6,"line_end":6,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"use self::twofloat::TwoFloat;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self::twofloat::TwoFloat`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse self::twofloat::TwoFloat;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"cannot call non-const fn `<TwoFloat as From<f64>>::from` in statics","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/mandelbrot.rs","byte_start":407,"byte_end":428,"line_start":15,"line_end":15,"column_start":10,"column_end":31,"is_primary":true,"text":[{"text":"        (NumberType::from(-2.), NumberType::from(1.));","highlight_start":10,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `<TwoFloat as From<f64>>::from` in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:15:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        (NumberType::from(-2.), NumberType::from(1.));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\u001b[0m\n\n"}
{"message":"cannot call non-const fn `<TwoFloat as From<f64>>::from` in statics","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/mandelbrot.rs","byte_start":430,"byte_end":450,"line_start":15,"line_end":15,"column_start":33,"column_end":53,"is_primary":true,"text":[{"text":"        (NumberType::from(-2.), NumberType::from(1.));","highlight_start":33,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `<TwoFloat as From<f64>>::from` in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:15:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        (NumberType::from(-2.), NumberType::from(1.));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\u001b[0m\n\n"}
{"message":"cannot call non-const fn `<TwoFloat as From<f64>>::from` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/mandelbrot.rs","byte_start":562,"byte_end":584,"line_start":18,"line_end":18,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"        (NumberType::from(-1.5), NumberType::from(1.5));","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `<TwoFloat as From<f64>>::from` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:18:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        (NumberType::from(-1.5), NumberType::from(1.5));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\n"}
{"message":"cannot call non-const fn `<TwoFloat as From<f64>>::from` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/mandelbrot.rs","byte_start":586,"byte_end":607,"line_start":18,"line_end":18,"column_start":34,"column_end":55,"is_primary":true,"text":[{"text":"        (NumberType::from(-1.5), NumberType::from(1.5));","highlight_start":34,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `<TwoFloat as From<f64>>::from` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:18:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        (NumberType::from(-1.5), NumberType::from(1.5));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\n"}
{"message":"use of mutable static is unsafe and requires unsafe function or block","code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `allow` by default but will be upgraded to `warn` in a future edition.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"error","spans":[{"file_name":"src/mandelbrot.rs","byte_start":3049,"byte_end":3081,"line_start":95,"line_end":95,"column_start":51,"column_end":83,"is_primary":true,"text":[{"text":"    let x_sample_range = x_sample_range.unwrap_or(default_settings::X_SAMPLE_RANGE);","highlight_start":51,"highlight_end":83}],"label":"use of mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0133]\u001b[0m\u001b[0m\u001b[1m: use of mutable static is unsafe and requires unsafe function or block\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mandelbrot.rs:95:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let x_sample_range = x_sample_range.unwrap_or(default_settings::X_SAMPLE_RANGE);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of mutable static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\u001b[0m\n\n"}
{"message":"aborting due to 5 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 5 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0015, E0133.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0015, E0133.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0015`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0015`.\u001b[0m\n"}
